name: Deploy Flask App to AWS EC2

on:
  push:
    branches:
      - main  # Trigger the workflow on pushes to the `main` branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build and push Docker image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .  # Build the Docker image from the current directory
          push: true  # Push the Docker image to DockerHub
          tags: atef2178/flask_app:latest  # Replace with your DockerHub username/repository

      # Step 5: Deploy to AWS EC2
      - name: Deploy to AWS EC2
        env:
          SERVER_USER: ec2-user  # Default user for Amazon Linux or Ubuntu EC2
          SERVER_IP: ${{ secrets.AWS_EC2_IP }}  # Public IP of your EC2 instance
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}  # Private key for SSH
        run: |
          # Save private key to a file
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          # SSH into EC2 and deploy the Docker container
          ssh -i private_key.pem -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << EOF
          docker pull atef2178/flask_app:latest  # Pull the latest image from DockerHub
          docker stop flask_app || true         # Stop the existing container (if running)
          docker rm flask_app || true           # Remove the existing container (if running)
          docker run -d --rm -p 80:5000 --name flask_app atef2178/flask_app:latest
          EOF

          # Clean up private key
          rm -f private_key.pem
